buildscript {
    dependencies {
        classpath "org.ow2.asm:asm:${project.asm_version}"
        classpath "org.ow2.asm:asm-analysis:${project.asm_version}"
        classpath "org.ow2.asm:asm-commons:${project.asm_version}"
        classpath "org.ow2.asm:asm-tree:${project.asm_version}"
        classpath "org.ow2.asm:asm-util:${project.asm_version}"
    }
}

plugins {
    id("java")
    id("idea")
    id("maven-publish")
    id("signing")
    id("com.jfrog.bintray") version "1.8.4"
    id "forgified-fabric-loom" version "0.6.54"
    id("com.github.johnrengelman.shadow") version("5.0.0")
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    maven { url "https://maven.fabricmc.net/" }
    jcenter()
}

version = modVersion
group = modMavenGroup
archivesBaseName = modJarBaseName

minecraft {
}

dependencies {
    minecraft("com.mojang:minecraft:$minecraft_version")
    mappings minecraft.officialMojangMappings()

    modCompile("net.fabricmc:fabric-loader:$loader_version")
    dependModule("fabric-api-base", fabric_version)
    dependModule("fabric-resource-loader-v0", fabric_version, false)

    modImplementation("me.shedaniel.cloth:config-2:4.8.3") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("io.github.prospector:modmenu:1.14.6+") {
        transitive = false
    }

    shadow("blue.endless:jankson:1.1.+")
    implementation("blue.endless:jankson:1.1.+")

    shadow("com.moandjiezana.toml:toml4j:0.7.+") {
        exclude(group: "com.google.code.gson", module: "gson")
    }
    implementation("com.moandjiezana.toml:toml4j:0.7.+")
}

def dependModule(moduleName, fapiVersion, include = true) {
    depend("net.fabricmc.fabric-api:$moduleName:${fabricApi.moduleVersion(moduleName, fapiVersion)}", include)
}

def depend(str, include = true) {
    dependencies.modRuntime(str) {
        exclude(module: "fabric-biomes-v1")
    }
    dependencies.modCompileOnly(str) {
        exclude(module: "fabric-biomes-v1")
    }
    if (include)
        dependencies.include(str)
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

shadowJar {
    relocate("blue.endless.jankson", "${basePackage}.shadowed.blue.endless.jankson")
    relocate("com.moandjiezana.toml", "${basePackage}.shadowed.com.moandjiezana.toml")

    configurations = [project.configurations.shadow]
    classifier "shadow"
}

jar {
    from("LICENSE")
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    setPublications("mavenJava")
    publish = true
    pkg {
        repo = "autoconfig1u"
        name = "autoconfig1u"
        userOrg = "shedaniel"
        licenses = ["Apache-2.0"]
        version {
            name = modVersion
            vcsTag = modVersion
            githubRepo = "shedaniel/AutoConfig"
            websiteUrl = "https://github.com/shedaniel/AutoConfig"
            issueTrackerUrl = "https://github.com/shedaniel/AutoConfig/issues"
            vcsUrl = "https://github.com/shedaniel/AutoConfig.git"
            gpg.sign = true
        }
    }
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

def remapSourcesJar = tasks.getByName("remapSourcesJar")

publishing {
    publications {
        mavenJava(MavenPublication.class) {
            artifact(remapJar)
            artifact(sourcesJar) {
                builtBy(remapSourcesJar)
            }
        }
    }

    repositories {
    }
}

